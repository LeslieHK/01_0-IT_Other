1.自动推断类型
2.所见即所得
3.编译器：scalac
4.没有基本类型，全部都是类类型
  如：1.toString
5.无参方法可以省略括号
6.变量与常量
	val:常量，如：val a=100
	var:变量，如：var b=30
7.表达式不输出
  如：a+=100
8.操作符的重载（所有的操作符都有对应的方法）
  a.+(10)
  1.to(10)
9.导包时，scala的"_"通配符==java中的"*"
  import scala.math._
  所有的scala都可以省略：import math._
  
  sqrt(2)	pow(2, 3)	min(3, 10) "hello".distinct	...
10.声明类型
	 var a:Int = 100
11.获取第n个字符
	 "hello"(4)	==	"hello".apply(4)
12.条件语句
	 scala> var i = 10
	 i: Int = 10

	 scala> if(i>100) 1 else "abcd"
	 res20: Any = abcd
13.Any是所有类型的父类，相当于Object
	 AnyVal，比如只有if没有else，则值为AnyVal
14.:quit	退出
	 :paste	粘贴
15.语句结束可以用";"也可以不用
16.块的最后表达式是block的值
17.输入输出
	 println
	 readLine
18.scala没有for语句，只有以下形式
   for(i <- 1 to 10) println(i)														简单
   for(i <- 1 to 10;a <- 1 to 10) println(i*a)						双循环
   for(i <- 1 to 10;a <- 1 to 10 if a > i) println(i*a)		条件循环
19.函数：必须指定参数类型

	 def method(n:Int):Unit = {println(n)}
	 method(1)
	 
	 def methodA(n:Int):Unit = {println(n)}														默认值
	 methodA()
	 
	 def methodB(n:Int*):Unit = {																			变长参数
	   for(a <- n) println(a)
	 }
	 methodB(2)
	 methodB(2, 3)
	 
20.过程：def method(n:Int){println(n)}

21.异常
   没有检查异常
   throw的类型是Nothing，ifelse的类型不能是Nothing
   
   try{
   
   } catch{
     case _:*Exception=>
     case ex:*Exception=>
   } finally{
   
   }
   
22.数组
// 定长数组
scala> val arr = new Array[Int](10)
arr: Array[Int] = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

// 推断类型，有值不需要new
scala> val s = Array("abc", "def")
s: Array[String] = Array(abc, def)

// 使用()而不是[]访问数组
scala> arr(1)
res0: Int = 0

scala> s(1)
res1: String = def

// 变长数组，要先导入包
scala> import scala.collection.mutable.ArrayBuffer
import scala.collection.mutable.ArrayBuffer

scala> var arrbuf = new ArrayBuffer[Int]()
arrbuf: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer()

scala> arrbuf += 0
res2: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(0)

// 添加多个值
scala> arrbuf += (1, 2, 3)
res3: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(0, 1, 2, 3)

// ++=追加任何集合
scala> arrbuf ++= arr
res4: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

scala> val res6 = arrbuf.trimEnd(5)
res6: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(0, 1, 2, 3, 0, 0, 0, 0, 0)

// 在2之前插入多个值
scala> val res8 = arrbuf.insert(2, 0, 1)
res8: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(0, 1, 0, 1, 2, 3, 0, 0, 0, 0, 0)

scala> val res10 = arrbuf.remove(2)
res10: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(0, 1, 1, 2, 3, 0, 0, 0, 0, 0)

scala> arrbuf.toString
res11: String = ArrayBuffer(0, 1, 1, 2, 3, 0, 0, 0, 0, 0)

scala> res11.toBuffer
res12: scala.collection.mutable.Buffer[Char] = ArrayBuffer(A, r, r, a, y, B, u, f, f, e, r, (, 0, ,,  , 1, ,,  , 1, ,,  , 2, ,,  , 3, ,,  , 0, ,,  , 0, ,,  , 0, ,,  , 0, ,,  , 0, ))

// 反转
scala> (0 until 10).reverse
res13: scala.collection.immutable.Range = Range(9, 8, 7, 6, 5, 4, 3, 2, 1, 0)

// 不修改原始数组产生新的数组
scala> val r = for(e <- arrbuf) yield 2*e-1
r: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(-1, 1, 1, 3, 5, -1, -1, -1, -1, -1)

// 算法
scala> arrbuf.filter(_ != 0).map(_ * 2)
res18: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(2, 2, 4, 6)

scala> val b = ArrayBuffer(1, 2, 3, 4)
b: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(1, 2, 3, 4)

scala> b.mkString("5")
res23: String = 1525354

// 变长数组
scala> val m = Array.ofDim[Double](3, 4)
m: Array[Array[Double]] = Array(Array(0.0, 0.0, 0.0, 0.0), Array(0.0, 0.0, 0.0, 0.0), Array(0.0, 0.0, 0.0, 0.0))

scala> m(0)(0) = 4;

scala> m
res25: Array[Array[Double]] = Array(Array(4.0, 0.0, 0.0, 0.0), Array(0.0, 0.0, 0.0, 0.0), Array(0.0, 0.0, 0.0, 0.0))



// 运算符重载
scala> import scala.collection.mutable.ArrayBuffer
import scala.collection.mutable.ArrayBuffer

scala> val arr = ArrayBuffer(1, 2, 3, 4)
arr: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(1, 2, 3, 4)

scala> arr+=5
res0: arr.type = ArrayBuffer(1, 2, 3, 4, 5)

scala> arr.+=(6)
res1: arr.type = ArrayBuffer(1, 2, 3, 4, 5, 6)

scala> arr.-=(6)
res2: arr.type = ArrayBuffer(1, 2, 3, 4, 5)

// +=:在前面追加
scala> arr.+=:(0)
res3: arr.type = ArrayBuffer(0, 1, 2, 3, 4, 5)

// +=:没有运算符重载
scala> arr+=:(0)
<console>:13: error: value +=: is not a member of Int
       arr+=:(0)
          ^
23.tab：代码提示

24.规律
  +		// 操作一个值
  ++	// 集合，数组
  =		// 修改源缓冲区，否则源缓冲区不变，生成新的buf
  :		// 以：结尾通常是前导操作
  -		//
  
  /:	// 左包含
  :/	// 右包含
